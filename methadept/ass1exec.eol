
operation Machine process() {}

// Send Functions
operation Belt send() {
  if (self.seg_in.isDefined() and self.seg_out.isDefined()) {
    //(self).println();
    if (self.seg_in.items.isDefined()){
      self.items = self.seg_in.items;
      self.seg_in.items = null;
      if (self.seg_out.get(self.items)) {
        (self + ' passing ' + self.items + ' to xx' + self.seg_out).println();
        self.items = null;
      }
      else {
        (self + ' not passsing ' + self.items + ' to ' + self.seg_out).println();
      }
    }
  }
}

operation Join send() {

  if (self.out.isDefined()) {
    if (self.in_left.isDefined() and self.items.isDefined() and self.items.size() < 2) {
      if (self.in_left.items.isDefined()){
        self.items.add(self.in_left.items);
        self.in_left.items = null;
      }
    }
    if (self.in_right.isDefined() and self.items.isDefined() and self.items.size() < 2) {
      if (self.in_right.items.isDefined()){
        self.items.add(self.in_right.items);
        self.in_right.items = null;
      }
    }
    if (self.items.size() > 0 and self.out.get(self.items.first())) {
      (self + ' passing ' + self.items + ' to ' + self.out).println();
      self.items.remove(self.items.first());
    }
    else {
      (self + ' cant pass ' + self.items + ' to ' + self.out).println();
    }
  }
}

operation Split send() {
  if (self.seg_in.isDefined() and self.seg_out_1.isDefined() and self.seg_out_2.isDefined()) {
    if (self.seg_in.items.isDefined()) {
      if (self.alternator){
        if (self.seg_out_1.get(self.seg_in.items)) {
          (self + ' passing ' + self.seg_in.items + ' to ' + self.seg_out_1).println();
          self.seg_in.items = null;
          self.alternator = false;
        }
      } else {
        if (self.seg_out_2.get(self.seg_in.items)) {
          (self + ' passing ' + self.seg_in.items + ' to ' + self.seg_out_2).println();
          self.seg_in.items = null;
          self.alternator = true;
        }
      }
    }
  }
}

operation Assembly send() {
  if (self.items.isDefined() and self.out.isDefined()){
    if (self.out.get(self.items)){
      (self + ' passing ' + self.items + ' to ' + self.out).println();
      self.out.items = null;
    }
  }
}

operation LoadingBay send() {

}

operation Incinerator send() {

}

operation ArrivalCube send() {
  if (self.items.isDefined()){
    if (self.seg_out.get(self.items)) {
      (self + ' passing ' + self.items + ' to ' + self.seg_out).println();
    }
  }
}
operation ArrivalSphere send() {
  if (self.items.isDefined()){
    if (self.seg_out.get(self.items)) {
      (self + ' passing ' + self.items + ' to ' + self.seg_out).println();
    }
  }
}

operation Inspection send() {
  if (self.in_item.isDefined()) {
    var passed := false;
    if (self.result = 'ACCEPT' and self.out_accept.isDefined()) {
      (self + ' inspecting. ' + self.in_item + ', is accepted, passing to ' + self.out_accept).println();
      passed = self.out_accept.get(self.in_item);
    }
    else if (self.result = 'FIX' and self.out_fix.isDefined()) {
    (self + ' inspecting. ' + self.in_item + ', needs fixing, passing to ' + self.out_fix).println();
      passed = self.out_fix.get(self.in_item);
    }
    else if (self.result = 'DESTROY' and self.out_destroy.isDefined()) {
    (self + ' inspecting. ' + self.in_item + ', should be destroyed, passing to ' + self.out_destroy).println();
      passed = self.out_destroy.get(self.in_item);
    }
    else {
    (self + ' cant pass, item not inspected yet').println();
    }
    if (passed) {
      self.in_item = null;
    }
  }
}

// Get Functions
operation Belt get(item) {
  if (self.items.isUndefined() and item.isDefined()) {
    self.items = item;
    return true;
  }else {
    return false;
  }
}

operation Join get(item) {
  if (self.items.size() < 2 and item.isDefined()) {
    (self + ' recieving item:' + item).println();
    self.items = item;
    return true;
  } else {
    return false;
  }
}

operation Assembly get(item) {
  var sphereReady := false;
  var cubeReady := false;
  if (item.isTypeOf(Sphere) and self.items.size() < 2) {
    sphereReady = true;
  }
  else if (item.isTypeOf(Cube) and self.items.size() < 2) {
    cubeReady = true;
  }
  if (cubeReady and sphereReady) {
    return true;
  } else {
    return false;
  }
}

operation Inspection get(item) {
  if (self.in_item.isUndefined() and item.isDefined()) {
    self.in_item = item;
    return true;
  }else {
    return false;
  }
}



// PROCESS FUNCTIONS
operation ArrivalSphere process() {
  if (self.items.isUndefined()){
    self.items = new Sphere();
    (self + ' created ' + self.items).println();
  }
}

operation ArrivalCube process() {
  if (self.items.isUndefined()){
    self.items = new Cube();
    (self + ' created ' + self.items).println();
  }
}

operation Inspection process() {
  var numbers : Sequence = Sequence {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  var number: Integer = numbers.random();
  if (self.in_item.isDefined()){
    if (number < 7) {
      self.result = 'ACCEPT';
    }
    else if (number >= 7 and number < 9) {
      self.result = 'FIX';
    }
    else if (number = 9) {
      self.result = 'DESTROY';
    }
  }
}

operation Incinerator process() {
  if (self.items.isDefined()){
    (self + ' destroying ' + self.items).println();

    self.items = null;
  }
}

operation LoadingBay process() {
  if (self.seg_in.items.isDefined()){
    self.item_storage.add(self.seg_in.items);
    (self + ' storing ' + self.seg_in.items + '. Total ' + self.item_storage.size() + ' items stored').println();
    self.seg_in.items = null;
  }
}

operation Assembly process() {
  if (self.in_cube.items.isDefined() and self.in_sphere.items.isDefined()){
    self.items = new AssembledItem();
    (self + ' Assembling Cube: ' + self.in_cube.items + ' and sphere: ' + self.in_sphere.items + ' to : ' + self.items).println();
    self.in_cube.items = null;
    self.in_sphere.items = null;
  }
}



operation main() {
  var step := 0;

  while (step < 20)
  {
      ('===== Step: ' + step + ' =====').println();

      for (m: Machine in Machine.all()) {
        m.process();
      }

      for (b: Belt in Belt.all()) {
        b.send();
      }

      step = step + 1;
  }
}
