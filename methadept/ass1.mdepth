Model ScheduleModel{
    Node Schedule{
      w_name: String{id};
      //check: $workers.allInstances().exists(a|a.name=w_name)$
      planning: Steps[1..*] {ordered};
    }

    Node Steps{
      duration: int;
      //check: $machines.exists(a|a.name=self.mach)$
    }

    Node Movement: Steps{
      moving_to_machine: String;
      duration: int = 1;
      //empty
    }

    Node Operate: Steps{
      operating_machine: String;
      //operates: machine[0..1];
    }
    //checkEmp: $Steps.allInstances().forAll(x|x.emp.isDefined())$
    checkOperatingMachineExists: $Steps.allInstances().forAll(x|x.operating_machine.isDefined())$
    checkMovingToMachineExists: $Steps.allInstances().forAll(x|x.moving_to_machine.isDefined())$
}

Model Productionsystem imports ScheduleModel{

  enum resultEnum {FIX, DESTROY, ACCEPT}

  Node Worker{
    name: String {id};
    schedule: Schedule[1];
    //check: $schedule.exists(b|b.w_name=self.name)$
  }

  //Node infrastructure{
//    segments: belt[0..*];
  //  machines: machine[0..*];
  //}

  abstract Node Item{
    is_on: Belt[0..1];
    //const1: $self.is_on.size()<=1$
  }

  Node Sphere: Item{
  //add stuff
  }

  Node Cube: Item{
  //add stuff
  }

  Node AssembledItem: Item{

  }

  abstract Node Belt{
    items: Item[0..1];
  }

  Node Straight: Belt{
    seg_in: Belt[1];
    seg_out: Belt[1];
  }

  Node Split: Belt{
    seg_in: Belt[1];
    seg_out_1: Belt[1];
    seg_out_2: Belt[1];
    alternator: boolean = true;
  }

  Node Join: Belt{ //items must be outputted in order of arrival
    in_left: Belt[1];
    in_right: Belt[1];
    out: Belt[1];
    items: Item[0..*] {ordered};
  }

  Node Machine: Belt{
    name: String{id};
    //check: $self.name.matches("[A-Z][a-z]*[0-9]*")$
    operator: Worker[0..1];
    operated: int = 0;
  }

  Node ArrivalCube: Machine{
    seg_out: Belt[1];
    items: Cube[0..1];
  }

  Node ArrivalSphere: Machine{
    seg_out: Belt[1];
    items: Sphere[0..1];
  }

  Node Assembly: Machine{
    in_cube: Belt[1]; // don't start if not connected to cubes
    in_sphere: Belt[1]; // don't start if not connected to spheres
    items: AssembledItem[0..1];  //out
    out: Belt[1];
  }

  Node Inspection: Machine{
    seg_in: Belt[1];
    in_item: Item[0..1];
    out_fix: Belt[1];
    out_destroy: Belt[1];
    out_accept: Belt[1];
    result: resultEnum;
  }

  Node LoadingBay: Machine{
    seg_in: Belt[1];
    item_storage: Item[0..*];
  }

  Node Fixer: Machine{
    seg_in: Belt[1];
    seg_out: Belt[1];
  }
  Node Incinerator: Machine{
    in_belt: Belt[1];
  }

  checkNames: $Machine.allInstances().forAll(x|x.name.matches("[A-Z][a-z]*[0-9]*"))$
}

Productionsystem PS1{

  Operate o_randy_1{operating_machine="Arrivalcube1";duration=4;}
  Movement m_randy_1{moving_to_machine="Arrivalsphere1";}
  Operate o_randy_2{operating_machine="Arrivalsphere1";duration=4;}
  Schedule schedule_randy_1{w_name="Randy"; planning=[o_randy_1, m_randy_1, o_randy_2];}
  Worker randy{name="Randy"; schedule=schedule_randy_1;}

  Operate o_dogu_1{operating_machine="Assembler1";duration=4;}
  Movement m_dogu_1{moving_to_machine="Inspector1";}
  Operate o_dogu_2{operating_machine="Inspector1";duration=4;}
  Schedule schedule_dogu_1{w_name="Dogu"; planning=[o_dogu_1, m_dogu_1, o_dogu_2];}
  Worker dogu{name="Dogu"; schedule=schedule_dogu_1;}

  Operate o_beau_1{operating_machine="Loadingbay1";duration=4;}
  Movement m_beau_1{moving_to_machine="Fixer1";}
  Operate o_beau_2{operating_machine="Fixer1";duration=4;}
  Movement m_beau_2{moving_to_machine="Incinerator1";}
  Operate o_beau_3{operating_machine="Incinerator1";duration=4;}
  Schedule schedule_beau_1{w_name="Beau"; planning=[o_beau_1, m_beau_1, o_beau_2, m_beau_2, o_beau_3];}
  Worker beau{name="Beau"; schedule=schedule_beau_1;}


  ArrivalCube arrival_cube{name="Arrivalcube1"; seg_out=s1;}
  ArrivalSphere arrival_sphere{name="Arrivalsphere1"; seg_out=s2;}
  Straight s1{seg_in=arrival_cube; seg_out=assembler1;}
  Straight s2{seg_in=arrival_sphere; seg_out=assembler1;}

  Assembly assembler1{name="Assembler1"; in_cube=s1; in_sphere=s2; out=join1;}
  Join join1{in_left=assembler1; in_right=s5; out=inspector1;}
  Inspection inspector1{name="Inspector1"; seg_in=join1; out_fix=s3; out_destroy=incinerator1; out_accept=s4;}

  Straight s3{seg_in=inspector1; seg_out=fixer1;}
  Straight s4{seg_in=inspector1; seg_out=loading_bay1;}
  Straight s5{seg_in=fixer1; seg_out=join1;}


  LoadingBay loading_bay1{name="Loadingbay1"; seg_in=s4;}
  Fixer fixer1{name="Fixer1"; seg_in=s3; seg_out=s5;}
  Incinerator incinerator1{name="Incinerator1"; in_belt=inspector1;}
}

Productionsystem PS2{

  Operate o_randy_1{operating_machine="Arrivalcube1";duration=4;}
  Movement m_randy_1{moving_to_machine="Arrivalsphere1";}
  Operate o_randy_2{operating_machine="Arrivalsphere1";duration=4;}
  Schedule schedule_randy_1{w_name="Randy"; planning=[o_randy_1, m_randy_1, o_randy_2];}
  Worker randy{name="Randy"; schedule=schedule_randy_1;}

  Operate o_dogu_1{operating_machine="Assembler1";duration=8;}
  Schedule schedule_dogu_1{w_name="Dogu"; planning=[o_dogu_1];}
  Worker dogu{name="Dogu"; schedule=schedule_dogu_1;}

  Operate o_beau_1{operating_machine="Inspector1";duration=4;}
  Movement m_beau_1{moving_to_machine="Inspector2";}
  Operate o_beau_2{operating_machine="Inspector2";duration=4;}
  Schedule schedule_beau_1{w_name="Beau"; planning=[o_beau_1, m_beau_1, o_beau_2];}
  Worker beau{name="Beau"; schedule=schedule_beau_1;}

  Operate o_tom_1{operating_machine="Fixer1";duration=4;}
  Movement m_tom_1{moving_to_machine="Fixer2";}
  Operate o_tom_2{operating_machine="Fixer2";duration=4;}
  Movement m_tom_2{moving_to_machine="Loadingbay1";}
  Operate o_tom_3{operating_machine="Loadingbay1";duration=8;}
  Schedule schedule_tom_1{w_name="Tom"; planning=[o_tom_1, m_tom_1, o_tom_2, m_tom_2, o_tom_3];}
  Worker tom{name="Tom"; schedule=schedule_tom_1;}

  Operate o_ali_1{operating_machine="Incinerator1";duration=4;}
  Movement m_ali_1{moving_to_machine="Incinerator2";}
  Operate o_ali_2{operating_machine="Incinerator2";duration=4;}
  Schedule schedule_ali_1{w_name="Ali"; planning=[o_ali_1, m_ali_1, o_ali_2];}
  Worker ali{name="Ali"; schedule=schedule_ali_1;}

  ArrivalCube arrival_cube{name="Arrivalcube1"; seg_out=assembler1;}
  ArrivalSphere arrival_sphere{name="Arrivalsphere1"; seg_out=assembler1;}
  Assembly assembler1{name="Assembler1"; in_cube=arrival_cube; in_sphere=arrival_sphere; out=join1;}

  Split split1{seg_in=assembler1; seg_out_1=join1; seg_out_2=join2;}

  Join join1{in_left=split1; in_right=fixer1; out=inspector1;}
  Join join2{in_left=split1; in_right=fixer2; out=inspector1;}
  Join join3{in_left=inspector1; in_right=inspector2; out=loading_bay1;}

  Inspection inspector1{name="Inspector1"; seg_in=join1; out_fix=fixer1; out_destroy=incinerator1; out_accept=join3;}
  Inspection inspector2{name="Inspector2"; seg_in=join2; out_fix=fixer2; out_destroy=incinerator2; out_accept=join3;}

  Fixer fixer1{name="Fixer1"; seg_in=inspector1; seg_out=join1;}
  Fixer fixer2{name="Fixer2"; seg_in=inspector2; seg_out=join2;}

  Incinerator incinerator1{name="Incinerator1"; in_belt=inspector1;}
  Incinerator incinerator2{name="Incinerator2"; in_belt=inspector2;}

  LoadingBay loading_bay1{name="Loadingbay1"; seg_in=join3;}
}

Productionsystem FaultyPS{

  // For Naming Constraint Checking.
  ArrivalCube arrival_cube{name="arrivalcube1"; seg_out=assembler1;}
  // For disabling Assembler to assemble AssembledItem since it is impossible from 2 Cube models.
  ArrivalCube arrival_sphere{name="Arrivalsphere1"; seg_out=assembler1;}
  Assembly assembler1{name="Assembler1"; in_cube=arrival_cube; in_sphere=arrival_sphere; out=join1;}

  // Only One Output Belt.
  Split split1{seg_in=assembler1; seg_out_1=join1;}

  Join join1{in_left=split1; in_right=fixer1; out=inspector1;}
  Join join2{in_left=split1; in_right=fixer2; out=inspector1;}
  Join join3{in_left=inspector1; in_right=inspector2; out=loading_bay1;}

  Inspection inspector1{name="Inspector1"; seg_in=join1; out_fix=fixer1; out_destroy=incinerator1; out_accept=join3;}
  Inspection inspector2{name="Inspector2"; seg_in=join2; out_fix=fixer2; out_destroy=incinerator2; out_accept=join3;}

  Fixer fixer1{name="Fixer1"; seg_in=inspector1; seg_out=join1;}
  Fixer fixer2{name="Fixer2"; seg_in=inspector2; seg_out=join2;}

  Incinerator incinerator1{name="Incinerator1"; in_belt=inspector1;}
  Incinerator incinerator2{name="Incinerator2"; in_belt=inspector2;}

  LoadingBay loading_bay1{name="Loadingbay1"; seg_in=join3;}
}
